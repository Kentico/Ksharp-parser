//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\DesanaD\Documents\Visual Studio 2015\Projects\Antlr\Antlr\Base.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr.Grammars {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class BaseParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, METHOD=17, 
		INT=18, FLOAT=19, ARGUMENT=20, WS=21;
	public const int
		RULE_compileUnit = 0, RULE_input = 1, RULE_cleanInput = 2, RULE_params = 3, 
		RULE_expression = 4;
	public static readonly string[] ruleNames = {
		"compileUnit", "input", "cleanInput", "params", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{%'", "'%}'", "'|'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'^'", "'<'", "'>'", "'=='", "'<='", "'>='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "METHOD", "INT", "FLOAT", "ARGUMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Base.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BaseParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BaseParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBaseVisitor<TResult> typedVisitor = visitor as IBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; input();
			State = 11; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public CleanInputContext cleanInput() {
			return GetRuleContext<CleanInputContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBaseVisitor<TResult> typedVisitor = visitor as IBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13; Match(T__0);
			State = 14; cleanInput();
			State = 15; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CleanInputContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParamsContext[] @params() {
			return GetRuleContexts<ParamsContext>();
		}
		public ParamsContext @params(int i) {
			return GetRuleContext<ParamsContext>(i);
		}
		public CleanInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cleanInput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.EnterCleanInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.ExitCleanInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBaseVisitor<TResult> typedVisitor = visitor as IBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCleanInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CleanInputContext cleanInput() {
		CleanInputContext _localctx = new CleanInputContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_cleanInput);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; expression(0);
			State = 22;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 18; Match(T__2);
					State = 19; @params();
					}
					} 
				}
				State = 24;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode[] METHOD() { return GetTokens(BaseParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(BaseParser.METHOD, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBaseVisitor<TResult> typedVisitor = visitor as IBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_params);
		try {
			State = 34;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; Match(T__3);
				State = 26; @params();
				State = 27; Match(T__4);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; Match(METHOD);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 30; Match(T__3);
				State = 31; Match(METHOD);
				State = 32; Match(T__4);
				State = 33; Match(METHOD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INT() { return GetToken(BaseParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(BaseParser.FLOAT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBaseListener typedListener = listener as IBaseListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBaseVisitor<TResult> typedVisitor = visitor as IBaseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 37; Match(INT);
				}
				break;

			case 2:
				{
				State = 38; Match(FLOAT);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 49;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 47;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 42;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 43; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 45;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 46; expression(4);
						}
						break;
					}
					} 
				}
				State = 51;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17\x37\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4\x17\n\x4\f\x4\xE\x4\x1A\v\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5%\n\x5\x3"+
		"\x6\x3\x6\x3\x6\x5\x6*\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x32"+
		"\n\x6\f\x6\xE\x6\x35\v\x6\x3\x6\x2\x2\x3\n\a\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\x2\x4\x3\x2\b\f\x3\x2\r\x12\x37\x2\f\x3\x2\x2\x2\x4\xF\x3\x2\x2\x2"+
		"\x6\x13\x3\x2\x2\x2\b$\x3\x2\x2\x2\n)\x3\x2\x2\x2\f\r\x5\x4\x3\x2\r\xE"+
		"\a\x2\x2\x3\xE\x3\x3\x2\x2\x2\xF\x10\a\x3\x2\x2\x10\x11\x5\x6\x4\x2\x11"+
		"\x12\a\x4\x2\x2\x12\x5\x3\x2\x2\x2\x13\x18\x5\n\x6\x2\x14\x15\a\x5\x2"+
		"\x2\x15\x17\x5\b\x5\x2\x16\x14\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16"+
		"\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\a\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2"+
		"\x1B\x1C\a\x6\x2\x2\x1C\x1D\x5\b\x5\x2\x1D\x1E\a\a\x2\x2\x1E%\x3\x2\x2"+
		"\x2\x1F%\a\x13\x2\x2 !\a\x6\x2\x2!\"\a\x13\x2\x2\"#\a\a\x2\x2#%\a\x13"+
		"\x2\x2$\x1B\x3\x2\x2\x2$\x1F\x3\x2\x2\x2$ \x3\x2\x2\x2%\t\x3\x2\x2\x2"+
		"&\'\b\x6\x1\x2\'*\a\x14\x2\x2(*\a\x15\x2\x2)&\x3\x2\x2\x2)(\x3\x2\x2\x2"+
		"*\x33\x3\x2\x2\x2+,\f\x6\x2\x2,-\t\x2\x2\x2-\x32\x5\n\x6\a./\f\x5\x2\x2"+
		"/\x30\t\x3\x2\x2\x30\x32\x5\n\x6\x6\x31+\x3\x2\x2\x2\x31.\x3\x2\x2\x2"+
		"\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\v\x3"+
		"\x2\x2\x2\x35\x33\x3\x2\x2\x2\a\x18$)\x31\x33";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Antlr.Grammars
